# --------------------
# STATUS MENU
# --------------------
- title: status
  icon: info.png
  subtitle_command: |
   branch=$(git branch --show-current)
   modified=$(diff_command 'modified' | wc -l | xargs)
   untracked=$(diff_command 'untracked' | wc -l | xargs)
   staged=$(diff_command 'staged' | wc -l | xargs)
  
   echo "staged: $staged, modified: $modified, untracked: $untracked -- ${branch}"
  subcommands:
    - title: current branch
      values_command: |
        git branch --show-current # just the current branch
      should_use_values_as_inline_commands: true
      subtitle_command: |
        git status | grep 'branch is' || echo '!! no remote branch linked yet'
      icon: fork.png
      subcommands:

        - title: copy branch name
          icon: copy.png
          command: |
            echo [parent] | xargs echo -n | pbcopy

        - title: copy latest commit
          icon: copy.png
          subtitle_command: |
             git rev-parse HEAD | xargs echo -n
          command: |
            git rev-parse HEAD | xargs echo -n | pbcopy

        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          command: |
            echo "[reload~1]"

    - title: staged
      subtitle_command: |
        staged=$(diff_command 'staged' | wc -l | xargs)
        echo "$staged file(s)"

      subcommands:
        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          command: |
            echo "[reload~1]"

        - title: 'process all hunks'
          subtitle: 'one by one'
          icon: open.png
          textview_action:
            command: |
              view_hunk "unstage"
          mods:
            - subtitle: unstage hunk & go to next
              mod: cmd
              command: |
                process_hunk "unstage"

                case $? in
                    0) echo "[tv_reload]";;
                    2) echo "[reload~1]";;
                    3) echo "[reload~2]";;
                esac

            - subtitle: reload status menu
              mod: ctrl
              command: |
                echo "[reload~1]"  

        - title: staged files
          should_use_values_as_inline_commands: true
          values_command: |
            diff_command 'staged'
          subtitle_command: |
            _get_hunk_count "unstage" [title]
          mods:
            - subtitle: unstage file
              mod: cmd
              command: |
                git_process_file "unstage" [title]
                
                case $? in
                    0) echo "[reload]";;
                    1) echo "[reload~1]";;
                esac
          subcommands:
            - title: back
              subtitle: 'go back a level (bb)'
              icon: back.png
              command: |
                echo "[reload~1]"

            - title: 'process each hunk'
              subtitle: 'one by one'
              icon: open.png
              textview_action:
                command: |
                  view_hunk "unstage" [parent]

              mods:
                - subtitle: unstage hunk & go to next
                  mod: cmd
                  command: |
                    process_hunk "unstage" [parent]

                    case $? in
                        0) echo "[tv_reload]";;
                        2) echo "[reload~1]";;
                        3) echo "[reload~2]";;
                    esac

                - subtitle: reload status menu
                  mod: ctrl
                  command: |
                    echo "[reload~1]"

            - title: list hunks
              subtitle: "view hunk"
              values_command: |
                git diff --cached [parent] | grep '^@@'
              should_use_values_as_inline_commands: true
              mods:
                - subtitle: unstage hunk
                  mod: cmd
                  command: |
                    process_hunk "unstage" [parent] [title]

                    case $? in
                        0) echo "[reload]";;
                        2) echo "[reload~1]";;
                        3) echo "[reload~2]";;
                    esac
              textview_action:
                command: |
                  view_hunk "unstage" [parent] [title]

    - title: modified
      subtitle_command: |
        modified=$(diff_command 'modified' | wc -l | xargs)
        echo "$modified file(s)"

      subcommands:
        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          command: |
            echo "[reload~1]"

        - title: 'process all hunks'
          subtitle: 'one by one'
          icon: open.png
          textview_action:
            command: |
              view_hunk "stage"

          mods:
            - subtitle: stage hunk & go to next
              mod: cmd
              command: |
                process_hunk "stage"

                case $? in
                    0) echo "[tv_reload]";;
                    2) echo "[reload~1]";;
                    3) echo "[reload~2]";;
                esac

            - subtitle: discard hunk & go to next
              mod: alt
              command: |
                process_hunk "discard"

                case $? in
                    0) echo "[tv_reload]";;
                    2) echo "[reload~1]";;
                    3) echo "[reload~2]";;
                esac

            - subtitle: reload status menu
              mod: ctrl
              command: |
                echo "[reload~1]"
        
        - title: modified files
          should_use_values_as_inline_commands: true
          values_command: |
            diff_command 'modified' # git status --short
          subtitle_command: |
            _get_hunk_count "stage" [title]
          mods:
            - subtitle: stage file
              mod: cmd
              command: |
                git_process_file "stage" [title]
                
                case $? in
                    0) echo "[reload]";;
                    1) echo "[reload~1]";;
                esac

          subcommands:
            - title: back
              subtitle: 'go back a level (bb)'
              icon: back.png
              command: |
                echo "[reload~1]"            
            
            - title: 'process each hunk'
              subtitle: 'one by one'
              icon: open.png
              textview_action:
                command: |
                  view_hunk "stage" [parent]

              mods:
                - subtitle: stage hunk & go to next
                  mod: cmd
                  command: |
                    process_hunk "stage" [parent]

                    case $? in
                        0) echo "[tv_reload]";;
                        2) echo "[reload~1]";;
                        3) echo "[reload~2]";;
                    esac

                - subtitle: discard hunk & go to next
                  mod: alt
                  command: |
                    process_hunk "discard" [parent]

                    case $? in
                        0) echo "[tv_reload]";;
                        2) echo "[reload~1]";;
                        3) echo "[reload~2]";;
                    esac

                - subtitle: reload status menu
                  mod: ctrl
                  command: |
                    echo "[reload~1]"

            - title: list hunks
              subtitle: "view hunk"
              values_command: |
                git diff [parent] | grep '^@@'
              should_use_values_as_inline_commands: true
              mods:
                - subtitle: stage hunk
                  mod: cmd
                  command: |
                    process_hunk "stage" [parent] [title]

                    case $? in
                        0) echo "[reload]";;
                        2) echo "[reload~1]";;
                        3) echo "[reload~2]";;
                    esac

                - subtitle: discard hunk
                  mod: alt
                  command: |
                    process_hunk "discard" [parent] [title]

                    case $? in
                        0) echo "[reload]";;
                        2) echo "[reload~1]";;
                        3) echo "[reload~2]";;
                    esac
              textview_action:
                command: |
                  view_hunk "stage" [parent] [title]

    - title: untracked
      subtitle_command: |
        untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
        echo "$untracked file(s)"

      subcommands:
        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          command: |
            echo "[reload~1]"

        - title: untracked files
          should_use_values_as_inline_commands: true
          values_command: |
            git ls-files --others --exclude-standard
          subtitle: 'stage file'
          command: |
            git_process_file "untracked" [title]
            
            case $? in
                0) echo "[reload]";;
                1) echo "[reload~1]";;
            esac

# --------------------
# GIT LOGIC
# --------------------

- title: fetch
  icon: down.small.png
  subtitle_command: |
    git status | grep 'branch is' || echo '!! no remote branch linked yet'
  # mods:
  #   - subtitle: reload status menu
  #     mod: cmd
  #     command: |
  #       echo "[reload]"
  # textview_action:
  command: |
    git fetch -p
    echo "[reload]"

- title: pull
  icon: down.big.png
  subtitle: 'runs `git stash; git pull`'
  command: |
    git_stash_checkout_pull
  mods:
    - subtitle: Launch Xcode after
      mod: cmd
      command: |
        killall Xcode;
        git_stash_checkout_pull
        xed .

- title: push
  icon: up.big.png
  subtitle_command: |
    branch=$(git branch --show-current);
    echo "runs \`git push -u origin $branch\`"
  command: |
    branch=$(git branch --show-current);
    git push -u origin $branch
  mods:
    - subtitle: force push
      mod: cmd
      command: |
        branch=$(git branch --show-current);
        git push -uf origin $branch

- title: checkout
  icon: fork.png
  subtitle: 'branch, tag or commit'
  subcommands:

    - title: local branches
      icon: fork.png
      should_use_smart_sort: true
      should_use_values_as_inline_commands: true
      values_command: |
        git branch | grep -v '*' # all local branches except the current one
      command: |
        git_stash_checkout_pull [title]
        echo "[reload~2]"
      mods:
        - subtitle: Launch Xcode after
          mod: cmd
          command: killall Xcode; git_stash_checkout_pull [title]; xed .

    - title: remote branches
      icon: globe.png
      should_use_smart_sort: true
      should_use_values_as_inline_commands: true
      values_command: |
        git branch -r
      command: |
        git_stash_checkout_pull --track-remote [title]
        echo "[reload~2]"
      mods:
        - subtitle: Launch Xcode after
          mod: cmd
          command: killall Xcode; git_stash_checkout_pull --track-remote [title] xed .

    - title: tags
      icon: tag.png
      should_use_smart_sort: true
      should_use_values_as_inline_commands: true
      values_command: |
        git tag | sort -r
      command: |
        git_stash_checkout_pull [title]
        echo "[reload~2]"
      mods:
        - subtitle: Launch Xcode after
          mod: cmd
          command: killall Xcode; git_stash_checkout_pull [title]; xed .

    - title: hash
      icon: hash.png
      should_use_smart_sort: true
      should_use_values_as_inline_commands: true
      values_command: |
        git log --oneline --all -n 100
      command: |
        git checkout "$(echo [title] | awk '{print $1}')"

- title: create
  icon: create.png
  subtitle: 'branch or tag'
  subcommands:
    - title: branch
      icon: create.png
      command: |
        git checkout -b [input_snake_case]
        echo "[reload~2]"

    - title: tag
      icon: pencil.png
      command: |
        git tag [input_snake_case]
      mods:
        - subtitle: and push to origin
          mod: cmd
          command: |
            git tag [input_snake_case]
            git push origin [input_snake_case]

- title: commit
  icon: pencil.png
  subcommands:
    - title: message
      icon: pencil.png
      command: |
        git commit -m [input_new_lines]
      mods:
        - subtitle: and push
          mod: cmd
          command: |
            branch=$(git branch --show-current);
            git commit -m [input_new_lines]
            git push -u origin $branch

    - title: easy message
      icon: pencil.png
      subtitle_command: |
        header=$(git log -1 --skip=0 --pretty=%B | head -n 1 | xargs)
        echo "commit by prepending previous header: $header"
      command: |
        header=$(git log -1 --skip=0 --pretty=%B | head -n 1 | xargs)
        git commit -m "$header"$'\n'[input_new_lines]
      mods:
        - subtitle: 'and push'
          mod: cmd
          command: |
            header=$(git log -1 --skip=0 --pretty=%B | head -n 1 | xargs)
            git commit -m "$header"$'\n'[input_new_lines]
            git push

    - title: easy commit
      icon: create.png
      subtitle_command: |
        message=$(git log -1 --skip=0 --pretty=%B | xargs)
        echo "commit using previous message: $message"
      command: |
        git commit --reuse-message=HEAD
      mods:
        - subtitle: 'and push'
          mod: cmd
          command: |
            git commit --reuse-message=HEAD
            git push

    - title: amend
      icon: back.line.png
      subtitle_command: |
        message=$(git log -1 --skip=0 --pretty=%B | xargs)
        echo "amend previous commit: $message"
      command: |
        git commit --amend -C HEAD
      mods:
        - subtitle: 'and force push'
          mod: cmd
          command: |
            git commit --amend -C HEAD
            git push --force

- title: delete
  icon: trash.png
  subtitle: 'branch or tag'
  subcommands:
    - title: local branches
      icon: fork.png
      should_use_smart_sort: true
      should_use_values_as_inline_commands: true
      values_command: |
        git branch | grep -v '*' # all local branches except the current one
      command: |
        git branch -d [title]
      mods:
        - subtitle: force delete
          mod: cmd
          command: |
            git branch -D [title]

    - title: remote branches
      icon: globe.png
      should_use_smart_sort: true
      should_use_values_as_inline_commands: true
      values_command: |
        git branch -r
      command: |
        branch=[title]
        git push origin --delete ${branch#origin/}

    - title: tags
      icon: tag.png
      should_use_smart_sort: true
      should_use_values_as_inline_commands: true
      values_command: |
        git tag | sort -r
      command: |
        git tag -d [title]
      mods:
        - subtitle: and delete remote tag
          mod: cmd
          command: |
            git tag -d [title]
            git push origin --delete [title]

- title: rebase
  icon: rebase.png
  subcommands:

    - title: local branches
      icon: fork.png
      should_use_smart_sort: true
      should_use_values_as_inline_commands: true
      values_command: |
        git branch | grep -v '*' # all local branches except the current one
      subcommands:
        - title: basic
          icon: rebase.png
          command: |
            git_stash_checkout_pull [parent]
            git checkout -
            git rebase [parent]

        - title: --onto
          icon: rebase.png
          subtitle: 'needs a start hash'
          subcommands:
            - title: start hash
              should_use_values_as_inline_commands: true
              command: |
                git_stash_checkout_pull [parent~2]
                git checkout -
                git rebase --onto [parent~2] [input]
              values_command: |
                git log --pretty=format:"%H"

        - title: rebase --onto (all branches)
          icon: view.png
          subtile: 'runs in alfred first to verify it is possible: will rebase current branch and all parent branches'
          textview_action:
            command: |
              rebase_multiple_branches_onto [parent] --debug
            mods:
              - subtitle: do rebase (all branches)
                mod: cmd
                command: |
                  rebase_multiple_branches_onto [parent]


# Hashes

- title: cherry.pick
  icon: pick.png
  values_command: |
    git log --oneline --all -n 100
  command: |
   git cherry-pick "$(echo [title] | awk '{print $1}')"

  mods:
    - subtitle: --no-commit
      mod: cmd
      command: |
        git cherry-pick --no-commit "$(echo [title] | awk '{print $1}')"

- title: revert
  icon: back.line.png
  values_command: |
    git log --oneline --all -n 100
  command: |
   git revert "$(echo [title] | awk '{print $1}')"

  mods:
    - subtitle: --no-commit
      mod: cmd
      command: |
        git revert --no-commit "$(echo [title] | awk '{print $1}')"

- title: reset.to
  icon: back.line.png
  values_command: |
    git log --oneline --all -n 100
  subcommands:
    - title: soft
      subtitle: 'Keep index and working directory, differences will show as staged'
      command: |
        hash="$(echo [parent] | awk '{print $1}')"
        git reset --soft "$hash"

    - title: mix
      subtitle: 'Keep working directory, differences will show as modifications '
      command: |
        hash="$(echo [parent] | awk '{print $1}')"
        git reset --mixed "$hash"

    - title: hard
      subtitle: 'Reset index and working directory, ALL local changes are discarded'
      command: |
        hash="$(echo [parent] | awk '{print $1}')"
        git reset --hard "$hash"

    - title: back
      subtitle: 'go back a level (bb)'
      icon: back.png
      command: |
        echo "[reload~1]"

- title: copy.diff.since
  icon: copy.png
  subtitle: 'branch or tag'
  subcommands:

    - title: local branches
      icon: fork.png
      should_use_smart_sort: true
      should_use_values_as_inline_commands: true
      values_command: |
        git branch | grep -v '*' # all local branches except the current one
      command: |
        git log --reverse --pretty=format:"%B" "[title]..HEAD" | pbcopy

    - title: tags
      icon: tag.png
      should_use_smart_sort: true
      should_use_values_as_inline_commands: true
      values_command: |
        git tag | sort -r
      command: |
        git log --reverse --pretty=format:"%B" "[title]..HEAD" | pbcopy


- title: all.tags
  icon: tag.png
  subcommands:    
    - title: fetch all
      icon: down.small.png
      command: |
        git fetch origin --tags
      mods:
        - subtitle: --force
          mod: cmd
          command: |
            git fetch origin --tags --force

    - title: push all
      icon: up.big.png
      command: |
        git push origin --tags
      mods:
        - subtitle: --force
          mod: cmd
          command: |
            git push origin --tags --force

    - title: show tags
      icon: tag.png
      should_use_values_as_inline_commands: true
      values_command: git tag | sort -r
      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            git checkout [parent]
            echo "[reload~1]"

        - title: copy diff since tag
          icon: copy.png
          command: |
            git log --reverse --pretty=format:"%B" "[parent]..HEAD" | pbcopy
          mods:
            - subtitle: copy for ChatGPT summary
              mod: cmd
              command: |
                {
                  echo "this is a change log from git, for my branch `$branch` for my project. Summarize these commit message and make a change log for a pull request."
                  echo ''
                  git log --reverse --pretty=format:"%B" "[parent]..HEAD"
                } | pbcopy

        - title: push tag
          icon: up.big.png
          command: |
            git push origin [parent]
          mods:
            - subtitle: --force
              mod: cmd
              command: |
                git push origin [parent] --force

        - title: delete tag
          icon: trash.png
          command: |
            git tag -d [parent]
          mods:
            - subtitle: and delete remote tag
              mod: cmd
              command: |
                git tag -d [parent]
                git push origin --delete [parent]


- title: stash
  icon: down.small.png
  command: |
    git stash


- title: pop
  icon: up.small.png
  command: |
    git pop


- title: history
  textview_action:
    command: |
      git log -n 50 --oneline --graph

# --------------------
# OPEN IN LOGIC
# --------------------

- title: open in Terminal
  icon: open.png
  command: |
    open -a Terminal .


- title: open in Xcode
  icon: open.png
  command: |
    xed .


- title: open in Finder
  icon: open.png
  command: |
    open .


- title: View in Alfred
  icon: open.png
  command: |
    [view in alfred]


# --------------------
# MISC LOGIC
# --------------------

- title: search
  icon: search.png
  command: |
    open [input]
  values_command: |
    find . -type f
  should_use_smart_sort: True
