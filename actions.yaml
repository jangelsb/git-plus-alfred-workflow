#- title: subcommands
#  subcommands:
#    - title: open in Terminal
#      command: open -a Terminal .
#
#    - title: selection
#      command: |
#        echo [input]
#      values:
#        - one
#        - two
#        - three
#      should_use_values_as_inline_commands: true
#
#    - title: input
#      command: |
#        echo [input]
#
#    - title: level 2
#      subcommands:
#        - title: level 3
#          subcommands:
#            - title: open in Sublime
#              command: echo "st [[parent]]"
#
#        - title: selection
#          command: |
#            echo [input]
#          values:
#            - one
#            - two
#            - three
#
#
#        - title: bbb
#          values_command: |
#            git branch | grep -v '*' # all local branches minus the current one
#          should_use_values_as_inline_commands: true
#          subtitle: local
#          #  icon: fork.png
#          subcommands:
#            - title: checkout
#              icon: fork.png
#              command: |
#                killall Xcode; git stash; git checkout "[parent]"; git pull;
#              mods:
#                - subtitle: Launch Xcode after
#                  mod: cmd
#                  command: killall Xcode; git stash; git checkout "[parent]"; git pull; xed .
#
#                - subtitle: Launch Sublime after
#                  mod: alt
#                  command: killall Xcode; git stash; git checkout "[parent]"; git pull; st .
#
#            - title: delete local branch
#              command: |
#                git branch -d "[parent]"
#              mods:
#                - subtitle: force delete
#                  mod: cmd
#                  command: |
#                    git branch -D "[parent]"
#
#
#            - title: copy branch name
#              command: |
#                echo "[parent]" | xargs echo -n | pbcopy
#
#
#
#
#- title: selection
#  command: |
#    echo [input]
#  values:
#    - one
#    - two
#    - three
#  should_use_values_as_inline_commands: true
#
#- title: selection
#  command: |
#    echo [input]
#  values:
#    - one
#    - two
#    - three
#

# ------------------------------------------------------------------------------------------

- title: status
  icon: info.png
  subtitle_command: |
    branch=$(git branch --show-current)
    modified=$(git diff --name-only | wc -l | xargs)
    untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
    staged=$(git diff --cached --name-only | wc -l | xargs)
    
    if [ "$modified" -eq 0 ] && [ "$untracked" -eq 0 ] && [ "$staged" -eq 0 ]
    then 
      echo "branch: ${branch}; clean"
    else 
      echo "branch: ${branch}; staged: $staged, modified: $modified, untracked: $untracked"
    fi
  subcommands:
    - title: current branch
      values_command: |
        git branch --show-current # just the current branch
      should_use_values_as_inline_commands: true
      subtitle: current
      icon: fork.png
      subcommands:
        - title: stash & pull
          icon: fork.png
          command: |
            killall Xcode; git stash; git checkout "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; xed .

            - subtitle: Launch Sublime after
              mod: alt
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; st .

        - title: copy diff for branch
          icon: copy.png
          command: |
            branch="[parent]"
            create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | head -n 1 | awk '{print $1}')
            parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | head -n 1)
            {
              git log --reverse --pretty=format:"%B" "${parent_branch}..${branch}"
            } | pbcopy
          mods:
            - subtitle: copy for ChatGPT summary
              mod: cmd
              command: |
                branch="[parent]"
                create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | head -n 1 | awk '{print $1}')
                parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | head -n 1)
                {
                  echo "this is a change log from git, for my branch `$branch` for my project. Summarize these commit message and make a change log for a pull request."
                  echo ''
                  git log --reverse --pretty=format:"%B" "${parent_branch}..${branch}"
                } | pbcopy

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy



    - title: commit
      icon: pencil.png
      command: |
       git commit -m "[input]"
      mods:
        - subtitle: and push
          mod: cmd
          command: |
            branch=$(git branch --show-current);
            git commit -m "[input]"
            git push -u origin $branch

    - title: staged
      subtitle_command: |
        staged=$(git diff --cached --name-only | wc -l | xargs)
        echo "$staged file(s)"
      command: |
        staged=$(git diff --cached --name-only | wc -l | xargs)
        git reset '[input]'
        if [ "$staged" -eq 1 ]; then
            echo "[reload~1]"
        else
            echo "[reload]"
        fi
      values_command: |
        git diff --cached --name-only

    - title: modified
      subtitle_command: |
        modified=$(git diff --name-only | wc -l | xargs)
        echo "$modified file(s)"
      command: |
        modified=$(git diff --name-only | wc -l | xargs)
        git add '[input]'
        if [ "$modified" -eq 1 ]; then
            echo "[reload~1]"
        else
            echo "[reload]"
        fi
      values_command: |
        git diff --name-only # git status --short

    - title: untracked
      subtitle_command: |
        untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
        echo "$untracked file(s)"
      command: |
        untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
        git add '[input]'
        if [ "$untracked" -eq 1 ]; then
            echo "[reload~1]"
        else
            echo "[reload]"
        fi
      values_command: |
        git ls-files --others --exclude-standard 

- title: pull
  icon: down.big.png
  command: |
    killall Xcode; git stash; git pull;
  mods:
  - subtitle: Launch Xcode after
    mod: cmd
    command: killall Xcode; git stash; git pull; xed .

  - subtitle: Launch Sublime after
    mod: alt
    command: killall Xcode; git stash; git pull; st .

- title: fetch
  icon: down.small.png
  command: |
    git fetch -p

- title: create
  icon: create.png
  command: |
    git checkout -b "[input_snake_case]"

- title: cherry-pick
  icon: pick.png
  command: |
   git cherry-pick [input]

- title: open in Terminal
  icon: open.png
  command: |
    open -a Terminal .

- title: open in Xcode
  icon: open.png
  command: |
    xed .

- title: open in Sublime (st)
  icon: open.png
  command: |
    st .

- title: open in Finder
  icon: open.png
  command: |
    open .

- title: View in Alfred
  icon: open.png
  command: |
    [view in alfred]


- title: push
  icon: up.big.png
  command: |
    branch=$(git branch --show-current);
    git push -u origin $branch
  mods:
    - subtitle: force push
      mod: cmd
      command: |
        branch=$(git branch --show-current);
        git push -uf origin $branch


- title: find
  icon: search.png
  command: |
    st "[input]"
  values_command: |
    find . -type f


- title: b
  icon: fork.png
  subcommands:
    - title: current branch
      values_command: |
        git branch --show-current # just the current branch
      should_use_values_as_inline_commands: true
      subtitle: current
      icon: fork.png
      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            killall Xcode; git stash; git checkout "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; xed .

            - subtitle: Launch Sublime after
              mod: alt
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; st .

        - title: checkout 'main branch' & delete this branch
          icon: trash.png
          command: |
            # if on 'main branch', does nothing
            master=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
            branch="[parent]"
            if [ "$branch" != "$master" ]; then
              killall Xcode; git stash; git checkout "$master"; git pull;
              git branch -D "[parent]"
            else 
              echo "on $master; doing nothing"
            fi

        - title: copy diff for branch
          icon: copy.png
          command: |
            branch="[parent]"
            create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | head -n 1 | awk '{print $1}')
            parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | head -n 1)
            {
              git log --reverse --pretty=format:"%B" "${parent_branch}..${branch}"
            } | pbcopy
          mods:
            - subtitle: copy for ChatGPT summary
              mod: cmd
              command: |
                branch="[parent]"
                create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | head -n 1 | awk '{print $1}')
                parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | head -n 1)
                {
                  echo "this is a change log from git, for my branch `$branch` for my project. Summarize these commit message and make a change log for a pull request."
                  echo ''
                  git log --reverse --pretty=format:"%B" "${parent_branch}..${branch}"
                } | pbcopy

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy


    - title: local branches
      values_command: |
        git branch | grep -v '*' # all local branches minus the current one
      should_use_values_as_inline_commands: true
      icon: fork.png
      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            killall Xcode; git stash; git checkout "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; xed .

            - subtitle: Launch Sublime after
              mod: alt
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; st .

        - title: rebase
          icon: rebase.png
          command: |
            git rebase "[parent]"

        - title: rebase --onto
          icon: rebase.png
          subtitle: 'needs a start hash'
          subcommands:
            - title: start hash
              command: |
                git rebase --onto "[parent~3]" "[input]"
              values_command: |
                git log --pretty=format:"%H"

        - title: rebase --onto (all branches)
          icon: rebase.png
          subtitle: 'if possible, will rebase the entire branch, along with all parent branches, until this branch is reached.'
          command: |
            branch=$(git branch --show-current)
            target_branch="[parent]"
            branch_history=()
            
            while [[ "$branch" != "$target_branch" ]]; do
              create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | tail -n 1 | awk '{print $1}')
              
              if [[ -z "$create_commit" ]]; then
                # echo "No creation commit found."
                break
              fi
            
              parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | tail -n 1)
              
              if [[ -z "$parent_branch" ]]; then
                # echo "No parent branch found."
                break
              fi
            
              branch_history+=("$branch:$parent_branch:$create_commit")
              branch=$parent_branch
            done
            
            if [[ "$branch" == "$target_branch" ]]; then
              # echo "Target branch '$target_branch' matched."
            
              git stash 
              
              for idx in {${#branch_history[@]}..1}; do
                entry="${branch_history[idx]}"
                # echo "Entry: $entry"  # Debugging line
                
                IFS=':' read -r branch_name parent_branch commit_hash <<< "$entry"
                # echo "Branch: $branch_name, Parent: $parent_branch, Commit: $commit_hash"
                
                if [[ -n "$branch_name" && -n "$parent_branch" && -n "$commit_hash" ]]; then
                  git checkout "$branch_name"
                  git rebase --onto "$parent_branch" "$commit_hash"
                fi
              done
            else
              echo "Doing nothing: target branch '$target_branch' not reached."
            fi

        - title: delete local branch
          icon: trash.png
          command: |
            git branch -d "[parent]"
          mods:
            - subtitle: force delete
              mod: cmd
              command: |
                git branch -D "[parent]"

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy


    - title: remote branches
      values_command: |
        git branch -r
      should_use_values_as_inline_commands: true
      icon: globe.png

      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            killall Xcode; git stash; git checkout -t "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout -t "[parent]"; git pull; xed .

            - subtitle: Launch Sublime after
              mod: alt
              command: killall Xcode; git stash; git checkout -t "[parent]"; git pull; st .

        - title: delete remote branch
          icon: trash.png
          command: |
            branch="[parent]"
            git push origin --delete ${branch#origin/}


        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy 

- title: tags
  icon: tag.png
  values_command: git tag | sort -r
  subcommands:
    - title: checkout
      icon: fork.png
      command: |
        git checkout "[parent]"

    - title: copy diff since tag
      icon: copy.png
      command: |
        git log --reverse --pretty=format:"%B" "[parent]..HEAD" | pbcopy
      mods:
        - subtitle: copy for ChatGPT summary
          mod: cmd
          command: |
            {
              echo "this is a change log from git, for my branch `$branch` for my project. Summarize these commit message and make a change log for a pull request."
              echo ''
              git log --reverse --pretty=format:"%B" "[parent]..HEAD"
            } | pbcopy

    - title: delete tag
      icon: trash.png
      command: |
        git tag -d "[parent]"
      mods:
        - subtitle: and delete remote tag
          mod: cmd
          command: |
            git tag -d "[parent]"
            git push origin --delete "[parent]"