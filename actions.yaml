- title: pull
  icon: down.big.png
  command: |
    git stash; git pull;
  mods:
  - subtitle: Launch Xcode after
    mod: cmd
    command: killall Xcode; git stash; git pull; xed .


- title: fetch
  icon: down.small.png
  command: |
    git fetch -p


- title: create
  icon: create.png
  command: |
    git checkout -b "[input_snake_case]"


- title: cherry-pick
  icon: pick.png
  command: |
   git cherry-pick [input]


- title: push
  icon: up.big.png
  command: |
    branch=$(git branch --show-current);
    git push -u origin $branch
  mods:
    - subtitle: force push
      mod: cmd
      command: |
        branch=$(git branch --show-current);
        git push -uf origin $branch


# --------------------
# MISC LOGIC
# --------------------

- title: open in Terminal
  icon: open.png
  command: |
    open -a Terminal .


- title: open in Xcode
  icon: open.png
  command: |
    xed .


- title: open in Finder
  icon: open.png
  command: |
    open .


- title: View in Alfred
  icon: open.png
  command: |
    [view in alfred]


- title: find
  icon: search.png
  command: |
    open "[input]"
  values_command: |
    find . -type f



# --------------------
# BRANCHES LOGIC
# --------------------
- title: b
  icon: fork.png
  subcommands:
    - title: current branch
      values_command: |
        git branch --show-current
      should_use_values_as_inline_commands: true
      subtitle: current
      icon: fork.png
      subcommands:
        - title: stash & pull
          icon: fork.png
          command: |
            git stash; git checkout "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; xed .

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy


    - title: local branches
      values_command: |
        git branch | grep -v '*' # all local branches except the current one
      should_use_values_as_inline_commands: true
      icon: fork.png
      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            git stash; git checkout "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; xed .

        - title: rebase
          icon: rebase.png
          command: |            
            git rebase "[parent]"

        - title: rebase --onto
          icon: rebase.png
          subtitle: 'needs a start hash'
          subcommands:
            - title: start hash
              command: |
                git rebase --onto "[parent~3]" "[input]"
              values_command: |
                git log --pretty=format:"%H"

        - title: delete local branch
          icon: trash.png
          command: |
            git branch -d "[parent]"
          mods:
            - subtitle: force delete
              mod: cmd
              command: |
                git branch -D "[parent]"

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy


    - title: remote branches
      values_command: |
        git branch -r
      should_use_values_as_inline_commands: true
      icon: globe.png
      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            git stash; git checkout -t "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout -t "[parent]"; git pull; xed .

        - title: delete remote branch
          icon: trash.png
          command: |
            branch="[parent]"
            git push origin --delete ${branch#origin/}


        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy 
            


# --------------------
# STATUS LOGIC
# --------------------

- title: status
  icon: info.png
  subtitle_command: |
    branch=$(git branch --show-current)
    modified=$(git diff --name-only | wc -l | xargs)
    untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
    staged=$(git diff --cached --name-only | wc -l | xargs)
    
    if [ "$modified" -eq 0 ] && [ "$untracked" -eq 0 ] && [ "$staged" -eq 0 ]
    then 
      echo "branch: ${branch}; clean"
    else 
      echo "branch: ${branch}; staged: $staged, modified: $modified, untracked: $untracked"
    fi
  subcommands:
    - title: current branch
      values_command: |
        git branch --show-current # just the current branch
      should_use_values_as_inline_commands: true
      should_skip_smart_sort: true
      subtitle: current
      icon: fork.png
      subcommands:
        - title: stash & pull
          icon: fork.png
          command: |
            git stash; git checkout "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; xed .

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy

#    - title: commit
#      icon: pencil.png
#      command: |
#       git commit -m "[input]"
#      mods:
#        - subtitle: and push
#          mod: cmd
#          command: |
#            branch=$(git branch --show-current);
#            git commit -m "[input]"
#            git push -u origin $branch


#    - title: amend & push
#      icon: up.big.png
#      subtitle: 'Amend previous commit & force push'
#      command: |
#        git commit --amend -C HEAD
#        git push --force
#
#    - title: easy commit & push
#      icon: up.big.png
#      subtitle: 'Commit using the previous commit message & push'
#      command: |
#        git commit --reuse-message=HEAD
#        git push


    - title: staged
      should_skip_smart_sort: true
      subtitle_command: |
        staged=$(git diff --cached --name-only | wc -l | xargs)
        echo "$staged file(s)"
      command: |
        staged=$(git diff --cached --name-only | wc -l | xargs)
        git reset '[input]'
        if [ "$staged" -eq 1 ]; then
            echo "[reload~1]"
        else
            echo "[reload]"
        fi
      values_command: |
        git diff --cached --name-only


    - title: modified
      should_skip_smart_sort: true
      subtitle_command: |
        modified=$(git diff --name-only | wc -l | xargs)
        echo "$modified file(s)"
      command: |
        modified=$(git diff --name-only | wc -l | xargs)
        git add '[input]'
        if [ "$modified" -eq 1 ]; then
            echo "[reload~1]"
        else
            echo "[reload]"
        fi
      values_command: |
        git diff --name-only # git status --short

      subcommands:
        - title: back
          subtitle: 'go back a level'
          command: |
            echo "[reload~1]"
          should_skip_smart_sort: true

        - title: list hunks
          subtitle: "view hunk"
          values_command: |
            git diff "[parent]" | grep '^@@'
          should_use_values_as_inline_commands: true
          should_skip_smart_sort: true
          subcommands:
            - title: back
              subtitle: 'go back a level'
              command: |
                echo "[reload~1]"
              should_skip_smart_sort: true

            - title: stage hunk
              subtitle: ' '
              icon: pick.png
              command: |
                ACTION="stage"  # "stage" or "unstage"
                HEADER="[parent]"  # e.g., "@@ -17,6 +17,7 @@"
                FILE="[parent~2]"   # File path
                
                # Determine the appropriate diff command
                if [[ "$ACTION" == "stage" ]]; then
                    FULL_DIFF=$(git diff "$FILE")
                elif [[ "$ACTION" == "unstage" ]]; then
                    FULL_DIFF=$(git diff --cached "$FILE")
                else
                    echo "Invalid action. Use 'stage' or 'unstage'."
                    exit 1
                fi
                
                DIFF_HEADER=$(echo "$FULL_DIFF" | sed -n "/^diff --git a\/$FILE b\/$FILE/,/^@@/p" | sed '$d' | sed '/^$/d')
                
                # Extract the diff metadata (diff --git, index, file headers)
                EXTRACTED_HUNK=$(echo "$FULL_DIFF" | sed -n "/$HEADER/,/^@@/p")

                # Store the first line 
                FIRST_LINE=$(echo "$EXTRACTED_HUNK" | head -n 1)
                
                # Remove any lines that start with `@@`
                HUNK=$(echo "$EXTRACTED_HUNK" | sed '/^@@/d')
                                
                # Check if the hunk exists
                if [ -z "$EXTRACTED_HUNK" ]; then
                    echo "Error: No matching hunk found for $HEADER in $FILE"
                    exit 1
                fi
                
                {
                    echo "$DIFF_HEADER"
                    echo "$FIRST_LINE"
                    echo "$HUNK"
                } > hunk.patch

                # Apply or reverse the patch
                if [[ "$ACTION" == "stage" ]]; then
                    git apply --cached hunk.patch
                elif [[ "$ACTION" == "unstage" ]]; then
                    git apply --cached --reverse hunk.patch
                fi

                # Clean up
                rm hunk.patch
                
                echo "[reload~1]"
              should_skip_smart_sort: true

            - title: discard hunk
              subtitle: ' '
              icon: trash.png
              command: |
                echo "[reload~1]"
              should_skip_smart_sort: true

            - title: view hunk
              subtitle: ' '
              icon: ' '
              values_command: |
                ACTION="stage"  # "stage" or "unstage"
                HEADER="[parent]"  # e.g., "@@ -17,6 +17,7 @@"
                FILE="[parent~2]"   # File path
                
                # Determine the appropriate diff command
                if [ "$ACTION" == "stage" ]; then
                    FULL_DIFF=$(git diff "$FILE")
                elif [ "$ACTION" == "unstage" ]; then
                    FULL_DIFF=$(git diff --cached "$FILE")
                else
                    echo "Invalid action. Use 'stage' or 'unstage'."
                    exit 1
                fi
                
                # Extract the specific hunk(s), excluding the header
                # HUNK=$(echo "$FULL_DIFF" | sed -n "/$HEADER/,/@@/p" | sed '1d; s/^@@ //')
                # HUNK=$(echo "$FULL_DIFF" | sed -n "/$HEADER/,/^@@/p" | sed '1d; s/^@@ //')
                # HUNK=$(echo "$FULL_DIFF" | sed -n "/$HEADER/,/^@@/p" | sed '1d; /^@@/d; s/^@@ //')
                HUNK=$(echo "$FULL_DIFF" | sed -n "/$HEADER/,/^@@/p" | sed '1d; /^@@/d')

                echo "$HUNK"
              should_use_values_as_inline_commands: true
              should_skip_smart_sort: true
              should_trim_values: false

    - title: untracked
      should_skip_smart_sort: true
      subtitle_command: |
        untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
        echo "$untracked file(s)"
      command: |
        untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
        git add '[input]'
        if [ "$untracked" -eq 1 ]; then
            echo "[reload~1]"
        else
            echo "[reload]"
        fi
      values_command: |
        git ls-files --others --exclude-standard 


# --------------------
# TAG LOGIC
# --------------------

- title: tags
  icon: tag.png
  values_command: git tag | sort -r
  subcommands:
    - title: checkout
      icon: fork.png
      command: |
        git checkout "[parent]"

    - title: copy diff since tag
      icon: copy.png
      command: |
        git log --reverse --pretty=format:"%B" "[parent]..HEAD" | pbcopy
      mods:
        - subtitle: copy for ChatGPT summary
          mod: cmd
          command: |
            {
              echo "this is a change log from git, for my branch `$branch` for my project. Summarize these commit message and make a change log for a pull request."
              echo ''
              git log --reverse --pretty=format:"%B" "[parent]..HEAD"
            } | pbcopy

    - title: delete tag
      icon: trash.png
      command: |
        git tag -d "[parent]"
      mods:
        - subtitle: and delete remote tag
          mod: cmd
          command: |
            git tag -d "[parent]"
            git push origin --delete "[parent]"