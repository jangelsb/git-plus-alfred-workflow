- title: pull
  icon: down.big.png
  command: |
    git stash; git pull;
  mods:
  - subtitle: Launch Xcode after
    mod: cmd
    command: killall Xcode; git stash; git pull; xed .


- title: fetch
  icon: down.small.png
  command: |
    git fetch -p


- title: create
  icon: create.png
  command: |
    git checkout -b "[input_snake_case]"


- title: cherry-pick
  icon: pick.png
  command: |
   git cherry-pick [input]


- title: push
  icon: up.big.png
  command: |
    branch=$(git branch --show-current);
    git push -u origin $branch
  mods:
    - subtitle: force push
      mod: cmd
      command: |
        branch=$(git branch --show-current);
        git push -uf origin $branch


# --------------------
# MISC LOGIC
# --------------------

- title: open in Terminal
  icon: open.png
  command: |
    open -a Terminal .


- title: open in Xcode
  icon: open.png
  command: |
    xed .


- title: open in Finder
  icon: open.png
  command: |
    open .


- title: View in Alfred
  icon: open.png
  command: |
    [view in alfred]


- title: search
  icon: search.png
  command: |
    open "[input]"
  values_command: |
    find . -type f



# --------------------
# BRANCHES LOGIC
# --------------------
- title: branch
  icon: fork.png
  subtitle: view all branches
  subcommands:
    - title: current branch
      values_command: |
        git branch --show-current
      should_use_values_as_inline_commands: true
      subtitle: current
      icon: fork.png
      subcommands:
        - title: stash & pull
          icon: fork.png
          command: |
            git_checkout "[parent]"
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git_checkout "[parent]"; xed .

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy

        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          should_skip_smart_sort: true
          command: |
            echo "[reload~1]"


    - title: local branches
      values_command: |
        git branch | grep -v '*' # all local branches except the current one
      should_use_values_as_inline_commands: true
      icon: fork.png
      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            git_checkout "[parent]"
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git_checkout "[parent]"; xed .

        - title: rebase
          icon: rebase.png
          command: |
            git stash
            git checkout "[parent]"
            git pull
            git checkout -
            git rebase "[parent]"

        - title: rebase --onto
          icon: rebase.png
          subtitle: 'needs a start hash'
          subcommands:
            - title: start hash
              command: |
                git stash
                git checkout "[parent~3]"
                git pull
                git checkout -
                git rebase --onto "[parent~3]" "[input]"
              values_command: |
                git log --pretty=format:"%H"

        - title: delete local branch
          icon: trash.png
          command: |
            git branch -d "[parent]"
          mods:
            - subtitle: force delete
              mod: cmd
              command: |
                git branch -D "[parent]"

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy

        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          should_skip_smart_sort: true
          command: |
            echo "[reload~1]"


    - title: remote branches
      values_command: |
        git branch -r
      should_use_values_as_inline_commands: true
      icon: globe.png
      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            git stash; git checkout -t "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout -t "[parent]"; git pull; xed .

        - title: delete remote branch
          icon: trash.png
          command: |
            branch="[parent]"
            git push origin --delete ${branch#origin/}


        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy

        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          should_skip_smart_sort: true
          command: |
            echo "[reload~1]"
            


    - title: back
      subtitle: 'go back a level (bb)'
      icon: back.png
      should_skip_smart_sort: true
      command: |
        echo "[reload~1]"
# --------------------
# STATUS MENU
# --------------------

- title: status
  icon: info.png
  subtitle_command: |
   branch=$(git branch --show-current)
   modified=$(diff_command 'modified' | wc -l | xargs)
   untracked=$(diff_command 'untracked' | wc -l | xargs)
   staged=$(diff_command 'staged' | wc -l | xargs)
  
   echo "staged: $staged, modified: $modified, untracked: $untracked -- ${branch}"
  subcommands:
    - title: current branch
      values_command: |
        git branch --show-current # just the current branch
      should_use_values_as_inline_commands: true
      should_skip_smart_sort: true
      subtitle_command: |
        git status | grep 'branch is'
      icon: fork.png
      subcommands:
        - title: fetch
          icon: down.small.png
          command: |
            git fetch -p
            echo "[reload~1]"

        - title: stash & pull
          icon: fork.png
          command: |
            git_checkout "[parent]";
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git_checkout "[parent]"; xed .

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy

        - title: copy latest commit
          icon: copy.png
          subtitle_command: |
             git rev-parse HEAD | xargs echo -n
          command: |
            git rev-parse HEAD | xargs echo -n | pbcopy

        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          should_skip_smart_sort: true
          command: |
            echo "[reload~1]"


    - title: commit
      icon: pencil.png
      should_skip_smart_sort: true
      subcommands:
        - title: message
          icon: pencil.png
          command: |
            git commit -m "[input_new_lines]"
          mods:
            - subtitle: and push
              mod: cmd
              command: |
                branch=$(git branch --show-current);
                git commit -m "[input_new_lines]"
                git push -u origin $branch

        - title: easy commit
          icon: up.big.png
          subtitle_command: |
            message=$(git log -1 --skip=0 --pretty=%B | xargs)
            echo "commit using previous message: $message"
          command: |
            git commit --reuse-message=HEAD
          mods:
            - subtitle: 'and push'
              mod: cmd
              command: |
                git commit --reuse-message=HEAD
                git push

        - title: easy message
          icon: pencil.png
          subtitle_command: |
            header=$(git log -1 --skip=0 --pretty=%B | head -n 1 | xargs)
            echo "commit by prepending previous header: $header"
          command: |
            header=$(git log -1 --skip=0 --pretty=%B | head -n 1 | xargs)
            git commit -m "$header"$'\n'"[input_new_lines]"
          mods:
            - subtitle: 'and push'
              mod: cmd
              command: |
                header=$(git log -1 --skip=0 --pretty=%B | head -n 1 | xargs)
                git commit -m "$header"$'\n'"[input_new_lines]"
                git push

        - title: amend
          icon: up.big.png
          subtitle_command: |
            message=$(git log -1 --skip=0 --pretty=%B | xargs)
            echo "amend previous commit: $message"
          command: |
            git commit --amend -C HEAD
          mods:
            - subtitle: 'and force push'
              mod: cmd
              command: |
                git commit --amend -C HEAD
                git push --force

        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          should_skip_smart_sort: true
          command: |
            echo "[reload~1]"


    - title: staged
      should_skip_smart_sort: true
      subtitle_command: |
        staged=$(diff_command 'staged' | wc -l | xargs)
        echo "$staged file(s)"

      subcommands:
        - title: 'latest'
          subtitle: 'process each one, one by one'
          subcommands:
            - title: unstage hunk
              subtitle_command: |
                _get_first_file "unstage"
              icon: minus.png
              should_skip_smart_sort: true
              command: |
                process_hunk "unstage"

                case $? in
                    0) echo "[reload]";;
                    1) echo "[reload~1]";;
                    2) echo "[reload~2]";;
                    3) echo "[reload~3]";;
                esac

            - title: back
              subtitle: 'go back a level (bb)'
              icon: back.png
              should_skip_smart_sort: true
              command: |
                echo "[reload~1]"

            - title: view latest hunk
              values_command: |
                view_hunk "unstage"
              should_use_values_as_inline_commands: true
              should_skip_smart_sort: true
              should_trim_values: false

        - title: staged files
          should_skip_smart_sort: true
          should_use_values_as_inline_commands: true
          values_command: |
            diff_command 'staged'

          mods:
            - subtitle: unstage file
              mod: cmd
              command: |
                git_process_file "unstage" "[title]"
                
                case $? in
                    0) echo "[reload]";;
                    1) echo "[reload~1]";;
                esac

          subcommands:
            - title: list hunks
              subtitle: "view hunk"
              values_command: |
                git diff --cached "[parent]" | grep '^@@'
              should_use_values_as_inline_commands: true
              should_skip_smart_sort: true
              subcommands:
                - title: unstage hunk
                  subtitle: ' '
                  icon: minus.png
                  should_skip_smart_sort: true
                  command: |
                    process_hunk "unstage" "[parent~2]" "[parent]"

                    case $? in
                        0) echo "[reload]";;
                        1) echo "[reload~1]";;
                        2) echo "[reload~2]";;
                        3) echo "[reload~3]";;
                    esac

                - title: back
                  subtitle: 'go back a level (bb)'
                  icon: back.png
                  should_skip_smart_sort: true
                  command: |
                    echo "[reload~1]"

                - title: view hunk
                  should_use_values_as_inline_commands: true
                  should_skip_smart_sort: true
                  should_trim_values: false
                  values_command: |
                    view_hunk "unstage" "[parent~2]" "[parent]"

            - title: back
              subtitle: 'go back a level (bb)'
              icon: back.png
              should_skip_smart_sort: true
              command: |
                echo "[reload~1]"
        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          should_skip_smart_sort: true
          command: |
            echo "[reload~1]"



    - title: modified
      should_skip_smart_sort: true
      subtitle_command: |
        modified=$(diff_command 'modified' | wc -l | xargs)
        echo "$modified file(s)"

      subcommands:

        - title: 'latest'
          subtitle: 'process each one, one by one'
          subcommands:
            - title: stage hunk
              subtitle_command: |
                _get_first_file "stage"
              icon: plus.png
              should_skip_smart_sort: true
              command: |
                process_hunk "stage"

                case $? in
                    0) echo "[reload]";;
                    1) echo "[reload~1]";;
                    2) echo "[reload~2]";;
                    3) echo "[reload~3]";;
                esac

            - title: discard hunk
              subtitle: ' '
              icon: trash.png
              should_skip_smart_sort: true
              command: |
                process_hunk "discard"

                case $? in
                    0) echo "[reload]";;
                    1) echo "[reload~1]";;
                    2) echo "[reload~2]";;
                    3) echo "[reload~3]";;
                esac

            - title: back
              subtitle: 'go back a level (bb)'
              icon: back.png
              should_skip_smart_sort: true
              command: |
                echo "[reload~1]"

            - title: view latest hunk
              values_command: |
                view_hunk "stage"
              should_use_values_as_inline_commands: true
              should_skip_smart_sort: true
              should_trim_values: false

        - title: modified files
          should_skip_smart_sort: true
          should_use_values_as_inline_commands: true
          values_command: |
            diff_command 'modified' # git status --short
          mods:
            - subtitle: stage file
              mod: cmd
              command: |
                git_process_file "stage" "[title]"
                
                case $? in
                    0) echo "[reload]";;
                    1) echo "[reload~1]";;
                esac

          subcommands:

            - title: list hunks
              subtitle: "view hunk"
              values_command: |
                git diff "[parent]" | grep '^@@'
              should_use_values_as_inline_commands: true
              should_skip_smart_sort: true
              subcommands:
                - title: stage hunk
                  subtitle: ' '
                  icon: plus.png
                  should_skip_smart_sort: true
                  command: |
                    process_hunk "stage" "[parent~2]" "[parent]"

                    case $? in
                        0) echo "[reload]";;
                        1) echo "[reload~1]";;
                        2) echo "[reload~2]";;
                        3) echo "[reload~3]";;
                    esac

                - title: discard hunk
                  subtitle: ' '
                  icon: trash.png
                  should_skip_smart_sort: true
                  command: |
                    process_hunk "discard" "[parent~2]" "[parent]"

                    case $? in
                        0) echo "[reload]";;
                        1) echo "[reload~1]";;
                        2) echo "[reload~2]";;
                        3) echo "[reload~3]";;
                    esac

                - title: back
                  subtitle: 'go back a level (bb)'
                  icon: back.png
                  should_skip_smart_sort: true
                  command: |
                    echo "[reload~1]"
                  

                - title: view hunk
                  should_skip_smart_sort: true
                  should_use_values_as_inline_commands: true
                  should_trim_values: false
                  values_command: |
                    view_hunk "stage" "[parent~2]" "[parent]"

            - title: back
              subtitle: 'go back a level (bb)'
              icon: back.png
              should_skip_smart_sort: true
              command: |
                echo "[reload~1]"


        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          should_skip_smart_sort: true
          command: |
            echo "[reload~1]"

    - title: untracked
      should_skip_smart_sort: true
      subtitle_command: |
        untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
        echo "$untracked file(s)"

      subcommands:
        - title: back
          subtitle: 'go back a level (bb)'
          icon: back.png
          should_skip_smart_sort: true
          command: |
            echo "[reload~1]"

        - title: untracked files
          should_skip_smart_sort: true
          should_use_values_as_inline_commands: true
          values_command: |
            git ls-files --others --exclude-standard
          subtitle: 'stage file'
          command: |
            git_process_file "untracked" "[title]"
            
            case $? in
                0) echo "[reload]";;
                1) echo "[reload~1]";;
            esac


# --------------------
# TAG LOGIC
# --------------------

- title: tags
  icon: tag.png
  values_command: git tag | sort -r
  subcommands:
    - title: checkout
      icon: fork.png
      command: |
        git checkout "[parent]"

    - title: copy diff since tag
      icon: copy.png
      command: |
        git log --reverse --pretty=format:"%B" "[parent]..HEAD" | pbcopy
      mods:
        - subtitle: copy for ChatGPT summary
          mod: cmd
          command: |
            {
              echo "this is a change log from git, for my branch `$branch` for my project. Summarize these commit message and make a change log for a pull request."
              echo ''
              git log --reverse --pretty=format:"%B" "[parent]..HEAD"
            } | pbcopy

    - title: delete tag
      icon: trash.png
      command: |
        git tag -d "[parent]"
      mods:
        - subtitle: and delete remote tag
          mod: cmd
          command: |
            git tag -d "[parent]"
            git push origin --delete "[parent]"