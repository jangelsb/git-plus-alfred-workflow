- title: open in Sublime Text (st)
  icon: open.png
  command: |
    st .

- title: open in Sublime Text (sm)
  icon: open.png
  command: |
    sm .
# --------------------
# These are commands that should work but I don't feel are ready for prime time / full roll out yet
# --------------------
- title: exp
  icon: info.png
  subcommands:
    - title: current branch
      values_command: |
        git branch --show-current # just the current branch
      should_use_values_as_inline_commands: true
      subtitle: current
      icon: fork.png
      subcommands:
        - title: checkout 'main branch' & delete this branch
          icon: trash.png
          command: |
            # if on 'main branch', does nothing
            master=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
            branch="[parent]"
            if [ "$branch" != "$master" ]; then
              git stash; git checkout "$master"; git pull;
              git branch -D "[parent]"
            else 
              echo "on $master; doing nothing"
            fi

        - title: copy diff for branch
          icon: copy.png
          command: |
            branch="[parent]"
            create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | head -n 1 | awk '{print $1}')
            parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | head -n 1)
            {
              git log --reverse --pretty=format:"%B" "${parent_branch}..${branch}"
            } | pbcopy
          mods:
            - subtitle: copy for ChatGPT summary
              mod: cmd
              command: |
                branch="[parent]"
                create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | head -n 1 | awk '{print $1}')
                parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | head -n 1)
                {
                  echo "this is a change log from git, for my branch `$branch` for my project. Summarize these commit message and make a change log for a pull request."
                  echo ''
                  git log --reverse --pretty=format:"%B" "${parent_branch}..${branch}"
                } | pbcopy

    - title: local branches
      values_command: |
        git branch | grep -v '*' # all local branches minus the current one
      should_use_values_as_inline_commands: true
      icon: fork.png
      subcommands:
        - title: rebase --onto (all branches)
          icon: rebase.png
          subtitle: 'if possible, will rebase the entire branch, along with all parent branches, until this branch is reached.'
          command: |
            branch=$(git branch --show-current)
            target_branch="[parent]"
            branch_history=()
            
            while [[ "$branch" != "$target_branch" ]]; do
              create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | tail -n 1 | awk '{print $1}')
              
              if [[ -z "$create_commit" ]]; then
                # echo "No creation commit found."
                break
              fi
            
              parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | tail -n 1)
              
              if [[ -z "$parent_branch" ]]; then
                # echo "No parent branch found."
                break
              fi
            
              branch_history+=("$branch:$parent_branch:$create_commit")
              branch=$parent_branch
            done
            
            if [[ "$branch" == "$target_branch" ]]; then
              # echo "Target branch '$target_branch' matched."
            
              git stash 
              
              for idx in {${#branch_history[@]}..1}; do
                entry="${branch_history[idx]}"
                # echo "Entry: $entry"  # Debugging line
                
                IFS=':' read -r branch_name parent_branch commit_hash <<< "$entry"
                # echo "Branch: $branch_name, Parent: $parent_branch, Commit: $commit_hash"
                
                if [[ -n "$branch_name" && -n "$parent_branch" && -n "$commit_hash" ]]; then
                  git checkout "$branch_name"
                  git rebase --onto "$parent_branch" "$commit_hash"
                fi
              done
            else
              echo "Doing nothing: target branch '$target_branch' not reached."
            fi
