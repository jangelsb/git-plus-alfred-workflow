<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.jangelsb.git</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>0BA9ED6F-B709-49B6-A448-5F5634D7019F</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>1919C9A2-D0D0-4725-A06D-E3BFBF9E4212</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>18F23A81-CB46-4C67-9FE7-9BB4B9AF87C6</key>
		<array/>
		<key>1919C9A2-D0D0-4725-A06D-E3BFBF9E4212</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>20EE05A3-8AD6-4A9E-B23F-E3C3874E8593</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>7B78FFC7-7766-474F-8F27-7687D3FEEEA4</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>18F23A81-CB46-4C67-9FE7-9BB4B9AF87C6</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>20EE05A3-8AD6-4A9E-B23F-E3C3874E8593</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>CC2552BD-9769-4B08-8A3B-C96EAF7E7E85</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>22AA9BE8-E9EF-4C3F-AAE4-5DCC50E5EEFE</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>1A28BCE0-8BFB-4DE1-B761-4B1098D4A4C7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>555BFC35-7D96-47DD-8BE0-73E8B5768E50</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A9F8153D-1EF2-418D-9E9F-34BC7790CD25</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>5AA4C88E-F48A-4EA7-BCE7-7BE5EDD286A4</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>555BFC35-7D96-47DD-8BE0-73E8B5768E50</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>6096A812-AA1D-4D56-BCBD-F0CFB5965568</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>88666437-2755-420F-8B11-5A5225C12C47</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<true/>
			</dict>
		</array>
		<key>88666437-2755-420F-8B11-5A5225C12C47</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>22AA9BE8-E9EF-4C3F-AAE4-5DCC50E5EEFE</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>52D747E7-2FE3-4816-8E1E-AB0A99870D5B</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>0BA9ED6F-B709-49B6-A448-5F5634D7019F</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>6AF906CF-57FA-41B4-967E-D06828E92FBA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>2B6F959B-E985-412D-A7EC-D2D084773017</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>305D3D82-5368-44F1-B4BB-6F707F32771B</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>C679AB43-6F01-45E7-968D-B70DD4FF5218</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>14821CD6-3F96-4D38-8F2B-C72F6F147739</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>23C1F948-18A5-486D-8658-BFFDFD5D3F47</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>305D3D82-5368-44F1-B4BB-6F707F32771B</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>A9F8153D-1EF2-418D-9E9F-34BC7790CD25</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>2B6F959B-E985-412D-A7EC-D2D084773017</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>C679AB43-6F01-45E7-968D-B70DD4FF5218</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>2B6F959B-E985-412D-A7EC-D2D084773017</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>CC2552BD-9769-4B08-8A3B-C96EAF7E7E85</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>5AA4C88E-F48A-4EA7-BCE7-7BE5EDD286A4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Josh Angelsberg</string>
	<key>description</key>
	<string>A customizable git interface for Alfred</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>git+</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>3</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>{var:input_keyword}</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Loading...</string>
				<key>script</key>
				<string>source "$input_var_profile_path"

python3 git_filtering_internal.py "$1"</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>A customizable git interface for Alfred</string>
				<key>title</key>
				<string>git+</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>6096A812-AA1D-4D56-BCBD-F0CFB5965568</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>import sys

query = sys.argv[1]

path = query.split(';')[0].strip()

if path.startswith('cd '):
    path = path[3:]

sys.stdout.write(path)</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>9</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>22AA9BE8-E9EF-4C3F-AAE4-5DCC50E5EEFE</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>path</key>
				<string></string>
				<key>sortBy</key>
				<integer>0</integer>
				<key>sortDirection</key>
				<integer>0</integer>
				<key>sortFoldersAtTop</key>
				<false/>
				<key>sortOverride</key>
				<false/>
				<key>stackBrowserView</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.browseinalfred</string>
			<key>uid</key>
			<string>1A28BCE0-8BFB-4DE1-B761-4B1098D4A4C7</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import sys
import re

query = sys.argv[1]


# Remove the line with [reload:.*]
cleaned_query = re.sub(r"\[reload:.*\]", "", query, flags=re.MULTILINE).strip()

# Extract the path 
path_match = re.search(r"\[reload:(.*)\]", query)
path = f"{path_match.group(1)}" if path_match else ""

# Print the results separated by ;;;
sys.stdout.write(f"{cleaned_query};;;{path}")</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>9</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>20EE05A3-8AD6-4A9E-B23F-E3C3874E8593</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{var:output}</string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>555BFC35-7D96-47DD-8BE0-73E8B5768E50</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>delimiter</key>
				<string>;;;</string>
				<key>discardemptyarguments</key>
				<false/>
				<key>outputas</key>
				<integer>0</integer>
				<key>trimarguments</key>
				<false/>
				<key>variableprefix</key>
				<string>split</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.split</string>
			<key>uid</key>
			<string>CC2552BD-9769-4B08-8A3B-C96EAF7E7E85</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{query}</string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>output</key>
					<string>{var:split1}</string>
					<key>path</key>
					<string>{var:split2}</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>5AA4C88E-F48A-4EA7-BCE7-7BE5EDD286A4</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string></string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>4</integer>
						<key>matchstring</key>
						<string>\['?view in alfred'?\]</string>
						<key>outputlabel</key>
						<string>browse in alfred</string>
						<key>uid</key>
						<string>52D747E7-2FE3-4816-8E1E-AB0A99870D5B</string>
					</dict>
					<dict>
						<key>inputstring</key>
						<string></string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>4</integer>
						<key>matchstring</key>
						<string>^\/</string>
						<key>outputlabel</key>
						<string>location</string>
						<key>uid</key>
						<string>14821CD6-3F96-4D38-8F2B-C72F6F147739</string>
					</dict>
					<dict>
						<key>inputstring</key>
						<string></string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>4</integer>
						<key>matchstring</key>
						<string>^(?!cd).+</string>
						<key>outputlabel</key>
						<string>not a command</string>
						<key>uid</key>
						<string>305D3D82-5368-44F1-B4BB-6F707F32771B</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>command</string>
				<key>hideelse</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>88666437-2755-420F-8B11-5A5225C12C47</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>full_command="source $input_var_profile_path; $1"

# eval "$full_command" 2&gt;&amp;1
output=$(eval "$full_command" 2&gt;&amp;1)

if [ -z "$output" ]; then
  echo "command succeeded"
else
  echo "$output"
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>11</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>0BA9ED6F-B709-49B6-A448-5F5634D7019F</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string></string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>4</integer>
						<key>matchstring</key>
						<string>\[reload:.*]</string>
						<key>outputlabel</key>
						<string>should reload</string>
						<key>uid</key>
						<string>7B78FFC7-7766-474F-8F27-7687D3FEEEA4</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>else</string>
				<key>hideelse</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>1919C9A2-D0D0-4725-A06D-E3BFBF9E4212</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<true/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string></string>
				<key>title</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>18F23A81-CB46-4C67-9FE7-9BB4B9AF87C6</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{var:path}</string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>A9F8153D-1EF2-418D-9E9F-34BC7790CD25</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>unstackview</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.hidealfred</string>
			<key>uid</key>
			<string>6AF906CF-57FA-41B4-967E-D06828E92FBA</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{var:input_keyword} {query}</string>
				<key>leftcursor</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.showalfred</string>
			<key>uid</key>
			<string>2B6F959B-E985-412D-A7EC-D2D084773017</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>source "$input_var_profile_path"

python3 location_arg_parser.py "$1"</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>C679AB43-6F01-45E7-968D-B70DD4FF5218</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string></string>
				<key>title</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>23C1F948-18A5-486D-8658-BFFDFD5D3F47</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string># gitx

A customizable git interface for Alfred

## Usage

### Search your repos
![](images/filter_projects.jpg)

### Run commands on your repos
![](images/commands.jpg)

### Check out branches
* you can ⌘c to copy to the branch name!
* you can also make checkout modifiers so that when you hold command ⌘ or alt ⌥ a different command is run 
![](images/checkout_branch.jpg)

### Create branches
![](images/create_branch.jpg)

### Create your own commands
![](images/custom_commands.jpg)

## Version History


#### v2024.7 (WIP)
* Updated Alfred to stack the `view in alfred` command so you can press escape and get back to gitx
* Fixed issues in some cases with checkout and push if the branch name was really long
* Fixed an issue where modifiers were not getting their commands setup correctly
* Fixed issue with the pop command
* Updated the default additional commands with some sweet commands
* Add support for inline commands
* Add support for subtitle actions
* Add support for subcommands
* Add support for searching the subtitle as well
* Update the actions yaml to have icons and to split the branches into 3 different categories: current, local, remote


#### v2024.6
* Now really fixed the issue where you couldn't access bash functions that were in your profile, even though it is sourced (the script needed to run as zsh and not bash)
* Continuing to lay the ground work for more complicated commands (you can now make an action that shows a list of values (predefined or dynamic)
* Added a way to show repo in alfred (by passing [view in alfred] as the command for an action

#### v2024.5
* Fixed issues where you couldn't create a branch or fetch
* Fixed an issue where you couldn't access bash functions that were in your profile, even though it is sourced
* Added true yaml parsing
* Laying the ground work for more robust and complicated config based actions
* Updated the default values to have better onboarding

#### v2024.4
* Add icons for the different commands
* Update workflow icon
* Update screenshots

#### v2024.3
* Add support for yaml based modifiers (you can now add custom modifiers when checking out a branch!)
* source the profile before running a command as well
* Add support for user custom actions based on a yaml file and give some examples
* Update default values, made the git status do a complex bash command to be more helpful</string>
	<key>uidata</key>
	<dict>
		<key>0BA9ED6F-B709-49B6-A448-5F5634D7019F</key>
		<dict>
			<key>note</key>
			<string>run command</string>
			<key>xpos</key>
			<real>435</real>
			<key>ypos</key>
			<real>455</real>
		</dict>
		<key>18F23A81-CB46-4C67-9FE7-9BB4B9AF87C6</key>
		<dict>
			<key>xpos</key>
			<real>1220</real>
			<key>ypos</key>
			<real>480</real>
		</dict>
		<key>1919C9A2-D0D0-4725-A06D-E3BFBF9E4212</key>
		<dict>
			<key>xpos</key>
			<real>700</real>
			<key>ypos</key>
			<real>470</real>
		</dict>
		<key>1A28BCE0-8BFB-4DE1-B761-4B1098D4A4C7</key>
		<dict>
			<key>xpos</key>
			<real>660</real>
			<key>ypos</key>
			<real>235</real>
		</dict>
		<key>20EE05A3-8AD6-4A9E-B23F-E3C3874E8593</key>
		<dict>
			<key>note</key>
			<string>parse command &amp; path to reload</string>
			<key>xpos</key>
			<real>940</real>
			<key>ypos</key>
			<real>275</real>
		</dict>
		<key>22AA9BE8-E9EF-4C3F-AAE4-5DCC50E5EEFE</key>
		<dict>
			<key>note</key>
			<string>extract path</string>
			<key>xpos</key>
			<real>445</real>
			<key>ypos</key>
			<real>235</real>
		</dict>
		<key>23C1F948-18A5-486D-8658-BFFDFD5D3F47</key>
		<dict>
			<key>xpos</key>
			<real>485</real>
			<key>ypos</key>
			<real>880</real>
		</dict>
		<key>2B6F959B-E985-412D-A7EC-D2D084773017</key>
		<dict>
			<key>note</key>
			<string>navigate to path in alfred</string>
			<key>xpos</key>
			<real>635</real>
			<key>ypos</key>
			<real>695</real>
		</dict>
		<key>555BFC35-7D96-47DD-8BE0-73E8B5768E50</key>
		<dict>
			<key>xpos</key>
			<real>1405</real>
			<key>ypos</key>
			<real>310</real>
		</dict>
		<key>5AA4C88E-F48A-4EA7-BCE7-7BE5EDD286A4</key>
		<dict>
			<key>xpos</key>
			<real>1325</real>
			<key>ypos</key>
			<real>310</real>
		</dict>
		<key>6096A812-AA1D-4D56-BCBD-F0CFB5965568</key>
		<dict>
			<key>xpos</key>
			<real>70</real>
			<key>ypos</key>
			<real>165</real>
		</dict>
		<key>6AF906CF-57FA-41B4-967E-D06828E92FBA</key>
		<dict>
			<key>xpos</key>
			<real>370</real>
			<key>ypos</key>
			<real>675</real>
		</dict>
		<key>88666437-2755-420F-8B11-5A5225C12C47</key>
		<dict>
			<key>xpos</key>
			<real>80</real>
			<key>ypos</key>
			<real>425</real>
		</dict>
		<key>A9F8153D-1EF2-418D-9E9F-34BC7790CD25</key>
		<dict>
			<key>xpos</key>
			<real>1590</real>
			<key>ypos</key>
			<real>575</real>
		</dict>
		<key>C679AB43-6F01-45E7-968D-B70DD4FF5218</key>
		<dict>
			<key>note</key>
			<string>if is a location, convert back to location title, then navigate to that in alfred</string>
			<key>xpos</key>
			<real>200</real>
			<key>ypos</key>
			<real>735</real>
		</dict>
		<key>CC2552BD-9769-4B08-8A3B-C96EAF7E7E85</key>
		<dict>
			<key>xpos</key>
			<real>1240</real>
			<key>ypos</key>
			<real>310</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>git</string>
				<key>placeholder</key>
				<string>gitx</string>
				<key>required</key>
				<true/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string>type this keyword to launch the flow</string>
			<key>label</key>
			<string>keyword</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>input_keyword</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>required</key>
				<true/>
				<key>trim</key>
				<true/>
				<key>verticalsize</key>
				<integer>9</integer>
			</dict>
			<key>description</key>
			<string>list out all your repos as a yaml array. 

example (note the two spaces indentation):

- title: Repo 1
  path: $repo_path1

- title: Repo 2
  path: "/path/to/repo2"
  actions_path: /path/to/actions.yaml

NOTE: if you set a “bash profile”, you can use enviroment variables for your paths, e.g, $env_var</string>
			<key>label</key>
			<string>repo list</string>
			<key>type</key>
			<string>textarea</string>
			<key>variable</key>
			<string>input_repo_list</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>filtermode</key>
				<integer>2</integer>
				<key>placeholder</key>
				<string>~/.zshenv</string>
				<key>required</key>
				<false/>
			</dict>
			<key>description</key>
			<string>If this value, exists the script will source it to be able to read environment variables defined in the repo config</string>
			<key>label</key>
			<string>bash profile</string>
			<key>type</key>
			<string>filepicker</string>
			<key>variable</key>
			<string>input_var_profile_path</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>filtermode</key>
				<integer>2</integer>
				<key>placeholder</key>
				<string>actions.yaml</string>
				<key>required</key>
				<false/>
			</dict>
			<key>description</key>
			<string>Use `actions.yaml` for default values</string>
			<key>label</key>
			<string>default actions</string>
			<key>type</key>
			<string>filepicker</string>
			<key>variable</key>
			<string>input_actions_path</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>filtermode</key>
				<integer>2</integer>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
			</dict>
			<key>description</key>
			<string>Use this for any actions you want to add to the default actions</string>
			<key>label</key>
			<string>additional actions</string>
			<key>type</key>
			<string>filepicker</string>
			<key>variable</key>
			<string>input_additional_actions_path</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>- title: status
  icon: info.png
  subtitle_command: |
    branch=$(git branch --show-current)
    modified=$(git diff --name-only | wc -l | xargs)
    untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
    staged=$(git diff --cached --name-only | wc -l | xargs)
    
    if [ "$modified" -eq 0 ] &amp;&amp; [ "$untracked" -eq 0 ] &amp;&amp; [ "$staged" -eq 0 ]
    then 
      echo "branch: ${branch}; clean"
    else 
      echo "branch: ${branch}; staged: $staged, modified: $modified, untracked: $untracked"
    fi
  subcommands:
    - title: current branch
      values_command: |
        git branch --show-current # just the current branch
      should_use_values_as_inline_commands: true
      subtitle: current
      icon: fork.png
      subcommands:
        - title: stash &amp; pull
          icon: fork.png
          command: |
            git stash; git checkout "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; xed .

            - subtitle: Launch Sublime after
              mod: alt
              command: git stash; git checkout "[parent]"; git pull; st .

        - title: copy diff for branch
          icon: copy.png
          command: |
            branch="[parent]"
            create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | head -n 1 | awk '{print $1}')
            parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | head -n 1)
            {
              git log --reverse --pretty=format:"%B" "${parent_branch}..${branch}"
            } | pbcopy
          mods:
            - subtitle: copy for ChatGPT summary
              mod: cmd
              command: |
                branch="[parent]"
                create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | head -n 1 | awk '{print $1}')
                parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | head -n 1)
                {
                  echo "this is a change log from git, for my branch `$branch` for my project. Summarize these commit message and make a change log for a pull request."
                  echo ''
                  git log --reverse --pretty=format:"%B" "${parent_branch}..${branch}"
                } | pbcopy

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy



    - title: commit
      icon: pencil.png
      command: |
       git commit -m "[input]"
      mods:
        - subtitle: and push
          mod: cmd
          command: |
            branch=$(git branch --show-current);
            git commit -m "[input]"
            git push -u origin $branch

    - title: staged
      subtitle_command: |
        staged=$(git diff --cached --name-only | wc -l | xargs)
        echo "$staged file(s)"
      command: |
        staged=$(git diff --cached --name-only | wc -l | xargs)
        git reset '[input]'
        if [ "$staged" -eq 1 ]; then
            echo "[reload~1]"
        else
            echo "[reload]"
        fi
      values_command: |
        git diff --cached --name-only

    - title: modified
      subtitle_command: |
        modified=$(git diff --name-only | wc -l | xargs)
        echo "$modified file(s)"
      command: |
        modified=$(git diff --name-only | wc -l | xargs)
        git add '[input]'
        if [ "$modified" -eq 1 ]; then
            echo "[reload~1]"
        else
            echo "[reload]"
        fi
      values_command: |
        git diff --name-only # git status --short

    - title: untracked
      subtitle_command: |
        untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
        echo "$untracked file(s)"
      command: |
        untracked=$(git ls-files --others --exclude-standard | wc -l | xargs)
        git add '[input]'
        if [ "$untracked" -eq 1 ]; then
            echo "[reload~1]"
        else
            echo "[reload]"
        fi
      values_command: |
        git ls-files --others --exclude-standard 

- title: pull
  icon: down.big.png
  command: |
    git stash; git pull;
  mods:
  - subtitle: Launch Xcode after
    mod: cmd
    command: killall Xcode; git stash; git pull; xed .

  - subtitle: Launch Sublime after
    mod: alt
    command: git stash; git pull; st .

- title: fetch
  icon: down.small.png
  command: |
    git fetch -p

- title: create
  icon: create.png
  command: |
    git checkout -b "[input_snake_case]"

- title: cherry-pick
  icon: pick.png
  command: |
   git cherry-pick [input]

- title: open in Terminal
  icon: open.png
  command: |
    open -a Terminal .

- title: open in Xcode
  icon: open.png
  command: |
    xed .

- title: open in Sublime (st)
  icon: open.png
  command: |
    st .

- title: open in Finder
  icon: open.png
  command: |
    open .

- title: View in Alfred
  icon: open.png
  command: |
    [view in alfred]


- title: push
  icon: up.big.png
  command: |
    branch=$(git branch --show-current);
    git push -u origin $branch
  mods:
    - subtitle: force push
      mod: cmd
      command: |
        branch=$(git branch --show-current);
        git push -uf origin $branch


- title: find
  icon: search.png
  command: |
    st "[input]"
  values_command: |
    find . -type f


- title: b
  icon: fork.png
  subcommands:
    - title: current branch
      values_command: |
        git branch --show-current # just the current branch
      should_use_values_as_inline_commands: true
      subtitle: current
      icon: fork.png
      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            git stash; git checkout "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; xed .

            - subtitle: Launch Sublime after
              mod: alt
              command: git stash; git checkout "[parent]"; git pull; st .

        - title: checkout 'main branch' &amp; delete this branch
          icon: trash.png
          command: |
            # if on 'main branch', does nothing
            master=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
            branch="[parent]"
            if [ "$branch" != "$master" ]; then
              git stash; git checkout "$master"; git pull;
              git branch -D "[parent]"
            else 
              echo "on $master; doing nothing"
            fi

        - title: copy diff for branch
          icon: copy.png
          command: |
            branch="[parent]"
            create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | head -n 1 | awk '{print $1}')
            parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | head -n 1)
            {
              git log --reverse --pretty=format:"%B" "${parent_branch}..${branch}"
            } | pbcopy
          mods:
            - subtitle: copy for ChatGPT summary
              mod: cmd
              command: |
                branch="[parent]"
                create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | head -n 1 | awk '{print $1}')
                parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | head -n 1)
                {
                  echo "this is a change log from git, for my branch `$branch` for my project. Summarize these commit message and make a change log for a pull request."
                  echo ''
                  git log --reverse --pretty=format:"%B" "${parent_branch}..${branch}"
                } | pbcopy

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy


    - title: local branches
      values_command: |
        git branch | grep -v '*' # all local branches minus the current one
      should_use_values_as_inline_commands: true
      icon: fork.png
      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            git stash; git checkout "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout "[parent]"; git pull; xed .

            - subtitle: Launch Sublime after
              mod: alt
              command: git stash; git checkout "[parent]"; git pull; st .

        - title: rebase
          icon: rebase.png
          command: |
            git rebase "[parent]"

        - title: rebase --onto
          icon: rebase.png
          subtitle: 'needs a start hash'
          subcommands:
            - title: start hash
              command: |
                git rebase --onto "[parent~3]" "[input]"
              values_command: |
                git log --pretty=format:"%H"

        - title: rebase --onto (all branches)
          icon: rebase.png
          subtitle: 'if possible, will rebase the entire branch, along with all parent branches, until this branch is reached.'
          command: |
            branch=$(git branch --show-current)
            target_branch="[parent]"
            branch_history=()
            
            while [[ "$branch" != "$target_branch" ]]; do
              create_commit=$(git reflog show --pretty='%H %gs' "$branch" | grep 'branch: Created from' | tail -n 1 | awk '{print $1}')
              
              if [[ -z "$create_commit" ]]; then
                # echo "No creation commit found."
                break
              fi
            
              parent_branch=$(git branch --contains "$create_commit" | grep -v "$branch" | awk '{$1=$1};1' | tail -n 1)
              
              if [[ -z "$parent_branch" ]]; then
                # echo "No parent branch found."
                break
              fi
            
              branch_history+=("$branch:$parent_branch:$create_commit")
              branch=$parent_branch
            done
            
            if [[ "$branch" == "$target_branch" ]]; then
              # echo "Target branch '$target_branch' matched."
            
              git stash 
              
              for idx in {${#branch_history[@]}..1}; do
                entry="${branch_history[idx]}"
                # echo "Entry: $entry"  # Debugging line
                
                IFS=':' read -r branch_name parent_branch commit_hash &lt;&lt;&lt; "$entry"
                # echo "Branch: $branch_name, Parent: $parent_branch, Commit: $commit_hash"
                
                if [[ -n "$branch_name" &amp;&amp; -n "$parent_branch" &amp;&amp; -n "$commit_hash" ]]; then
                  git checkout "$branch_name"
                  git rebase --onto "$parent_branch" "$commit_hash"
                fi
              done
            else
              echo "Doing nothing: target branch '$target_branch' not reached."
            fi

        - title: delete local branch
          icon: trash.png
          command: |
            git branch -d "[parent]"
          mods:
            - subtitle: force delete
              mod: cmd
              command: |
                git branch -D "[parent]"

        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy


    - title: remote branches
      values_command: |
        git branch -r
      should_use_values_as_inline_commands: true
      icon: globe.png

      subcommands:
        - title: checkout
          icon: fork.png
          command: |
            git stash; git checkout -t "[parent]"; git pull;
          mods:
            - subtitle: Launch Xcode after
              mod: cmd
              command: killall Xcode; git stash; git checkout -t "[parent]"; git pull; xed .

            - subtitle: Launch Sublime after
              mod: alt
              command: git stash; git checkout -t "[parent]"; git pull; st .

        - title: delete remote branch
          icon: trash.png
          command: |
            branch="[parent]"
            git push origin --delete ${branch#origin/}


        - title: copy branch name
          icon: copy.png
          command: |
            echo "[parent]" | xargs echo -n | pbcopy 

- title: tags
  icon: tag.png
  values_command: git tag | sort -r
  subcommands:
    - title: checkout
      icon: fork.png
      command: |
        git checkout "[parent]"

    - title: copy diff since tag
      icon: copy.png
      command: |
        git log --reverse --pretty=format:"%B" "[parent]..HEAD" | pbcopy
      mods:
        - subtitle: copy for ChatGPT summary
          mod: cmd
          command: |
            {
              echo "this is a change log from git, for my branch `$branch` for my project. Summarize these commit message and make a change log for a pull request."
              echo ''
              git log --reverse --pretty=format:"%B" "[parent]..HEAD"
            } | pbcopy

    - title: delete tag
      icon: trash.png
      command: |
        git tag -d "[parent]"
      mods:
        - subtitle: and delete remote tag
          mod: cmd
          command: |
            git tag -d "[parent]"
            git push origin --delete "[parent]"</string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<false/>
				<key>verticalsize</key>
				<integer>9</integer>
			</dict>
			<key>description</key>
			<string>This is the full YAML config. It has the same commands in `actions.yaml`

RECOMMENDATION:
* cut these commands and put them in your own YAML file
* put a space here (or any text) to remove these actions
* reference your YAML file above

Then you can easily edit your commands and keep them during upgrades, and if you ever want to see the latest commands, you can restore this to its default value (clear all text &amp; save) or check `actions.yaml`.</string>
			<key>label</key>
			<string>YAML config</string>
			<key>type</key>
			<string>textarea</string>
			<key>variable</key>
			<string>input_additional_actions</string>
		</dict>
	</array>
	<key>version</key>
	<string>2024.7.WIP5</string>
	<key>webaddress</key>
	<string>https://jangelsb.github.io</string>
</dict>
</plist>
